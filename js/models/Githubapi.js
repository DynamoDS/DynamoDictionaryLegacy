function commitChanges(ob) {
    console.log(JSON.parse(ob))
    //    var ob=JSON.parse(ob);
    //    console.log(ob)
    require(["githubapi"], function (Github) {
        // This is a personal access token, not using oAuth.
        // Currently this is under ramramps.  We have  to create
        // a generic user id and add to Github collobrator.
        // Add the token to a config file and put it in S3. Do not share the token
        var github = new Github({
            token: ""
        });
        //step 1: Create the branch
        //TO DO : Generate unique name for the branch
        var repo = github.getRepo("DynamoDS", "DynamoDictionary");
        var pull;

        function commitFile(data) {
            //            repo.getContents(gitInfo.branchName, data.if, true, function (err, contents) {
            var options = {
                author: {
                    name: 'Ram'
                    , email: 'ram@example.com'
                }
                , committer: {
                    name: 'Ram'
                    , email: 'Ram@example.com'
                }
                , encode: data.enc // Whether to base64 encode the file. (default: true) 
            };
            repo.writeFile(gitInfo.branchName, data.if, data.i, gitInfo.Message, options, function (err) {
                if (err) console.log(err);
                if(prd==false){
//                     console.log(fullJson,ob)
                    pr();
                    prd=true;
                }
            });
            //            });
        }
        repo.createBranch("master", gitInfo.branchName, function (err) {
            //step 2 : Read / get the contents
            
            var filelist = [];
            filelist[0] = {
                i: ob
                , if: 'data/Dynamo_Nodes_Documentation.json'
                , enc: true
            }
//            console.log(fullJson,JSON.parse(ob))
            for (key in eOb) {
                for (keykey in eOb[key]) {
                    var mainOb = JSON.parse(ob);
                    var nodeOb = mainOb[key];
                    var subub = eOb[key][keykey]
                    var imageFile = 'data/EXAMPLES/' + nodeOb.folderPath + "/img/" + nodeOb.imageFile[keykey] + ".jpg";
                    var dynFile = 'data/EXAMPLES/' + nodeOb.folderPath + "/dyn/" + nodeOb.dynFile[keykey] + ".dyn";
                    if (subub.image != undefined) {
                        filelist.push({
                            i: window.btoa(window.atob((subub.image.replace(/^(.+,)/, ''))))
                            , if: imageFile
                            , enc: false
                        });
                    }
                    if (subub.dyn != undefined) {
                        filelist.push({
                            i: subub.dyn
                            , if: dynFile
                            , enc: true
                        });
                    }
                }
            }
            if (filelist.length > 0) {
                filelist.map(commitFile);
            }
        });
        
        function pr() {
            repo.getContents(gitInfo.branchName, "README.md", true, function (err, contents) {
                var pull = {
                    title: gitInfo.branchName
                    , body: "This pull request has been automatically generated by DynamoDictionaryUser."
                    , base: "master"
                    , head: gitInfo.branchName
                };
                repo.createPullRequest(pull, function (err, pullRequest) {
                    
                    if (err) {console.log(err)}
                    else{
                        submittedpr=true;
                        d3.select('#prLogo').attr("src","images/icons/gh.png")
                        d3.select('#submitPR').select("span").html("View PR on Github! &nbsp;&nbsp;&nbsp;")
                        d3.select('#submitPR').on("click",function(){
                            window.location=(pullRequest.html_url)
                        })
                    }
                    
                    
                    
                    
                });
            })
        }
    });
}