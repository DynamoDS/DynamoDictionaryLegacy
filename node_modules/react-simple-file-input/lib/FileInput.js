'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _reactAddons = require('react/addons');

var _reactAddons2 = _interopRequireDefault(_reactAddons);

var objectKeys = Object.keys || require('object-keys');

var STYLE = {
  FIELD: {
    display: 'none'
  }
};

var INPUT_FIELD_REF = 'inputField';

var READ_METHOD_ALIASES = {
  buffer: 'readAsArrayBuffer',
  binary: 'readAsBinaryString',
  dataUrl: 'readAsDataURL',
  text: 'readAsText'
};

var SUPPORTED_EVENTS = ['onLoadStart', 'onLoadEnd', 'onLoad', 'onAbort', 'onError'];

var FileInput = _reactAddons2['default'].createClass({
  displayName: 'FileInput',

  propTypes: {
    readAs: _reactAddons2['default'].PropTypes.oneOf(objectKeys(READ_METHOD_ALIASES)),
    onLoadStart: _reactAddons2['default'].PropTypes.func,
    onLoadEnd: _reactAddons2['default'].PropTypes.func,
    onLoad: _reactAddons2['default'].PropTypes.func,
    onAbort: _reactAddons2['default'].PropTypes.func,
    onCancel: _reactAddons2['default'].PropTypes.func,
    onChange: _reactAddons2['default'].PropTypes.func,
    onError: _reactAddons2['default'].PropTypes.func,
    onProgress: _reactAddons2['default'].PropTypes.func,
    cancelIf: _reactAddons2['default'].PropTypes.func,
    abortIf: _reactAddons2['default'].PropTypes.func
  },

  componentWillMount: function componentWillMount() {
    if (!window.File || !window.FileReader) {
      console.warn('Browser does not appear to support API react-simple-file-input relies upon');
    }
  },

  handleChange: function handleChange(event) {
    var _this = this;

    var _props = this.props;
    var readAs = _props.readAs;
    var cancelIf = _props.cancelIf;
    var onCancel = _props.onCancel;
    var onProgress = _props.onProgress;
    var abortIf = _props.abortIf;
    var onChange = _props.onChange;

    var file = event.target.files[0];

    if (onChange) {
      onChange(file);
    }

    if (readAs) {
      var _ret = (function () {
        var fileReader = new window.FileReader();

        if (cancelIf && cancelIf(file)) {
          if (onCancel) {
            onCancel(file);
          }

          return {
            v: undefined
          };
        }

        var _loop = function (i) {
          var handlerName = SUPPORTED_EVENTS[i];

          if (_this.props[handlerName]) {
            fileReader[handlerName.toLowerCase()] = function (fileReadEvent) {
              _this.props[handlerName](fileReadEvent, file);
            };
          }
        };

        for (var i = 0; i < SUPPORTED_EVENTS.length; i++) {
          _loop(i);
        }

        if (typeof abortIf !== 'undefined') {
          fileReader.onprogress = function (event) {
            if (abortIf(event, file)) {
              fileReader.abort();
            } else if (onProgress) {
              onProgress(event, file);
            }
          };
        } else if (onProgress) {
          fileReader.onprogress = onProgress;
        }

        fileReader[READ_METHOD_ALIASES[readAs]](file);
      })();

      if (typeof _ret === 'object') return _ret.v;
    }
  },

  handleClick: function handleClick() {
    _reactAddons2['default'].findDOMNode(this.refs[INPUT_FIELD_REF]).click();
  },

  render: function render() {
    return _reactAddons2['default'].createElement(
      'div',
      { onClick: this.handleClick },
      _reactAddons2['default'].createElement('input', _extends({}, this.props, {
        type: 'file',
        onChange: this.handleChange, ref: INPUT_FIELD_REF,
        style: this.props.children ? STYLE.FIELD : {},
        children: null
      })),
      this.props.children
    );
  }
});

exports['default'] = FileInput;
module.exports = exports['default'];