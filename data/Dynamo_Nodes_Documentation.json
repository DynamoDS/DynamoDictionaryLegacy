[
    {
        "Name": "Code Block",
        "categories": [
            "Core",
            "Input"
        ],
        "folderPath": "Core/Input/Create",
        "dynFile": [
            "CodeBlock"
        ],
        "imageFile": [
            "CodeBlock"
        ],
        "inDepth": "The Code Block is universal and can be useful in all definitions. With this node, we can fully customize the Dynamo functionality and experience by coding directly into the graph. In this example, we see a range of possible uses including Numbers, Strings, Booleans for item based code, and Ranges and Sequences for creating lists of values."
    },
    {
        "Name": "Number Slider",
        "categories": [
            "Core",
            "Input"
        ],
        "folderPath": "Core/Input/Create",
        "dynFile": [
            "NumberSlider"
        ],
        "imageFile": [
            "NumberSlider"
        ],
        "inDepth": "The Number Slider is a customizable, tactile node that allows us to interface with the data driving our Dynamo definitions. Here, the number slider is paired with a code block to create a dynamic list sequence with a variable step size."
    },
    {
        "Name": "Integer Slider",
        "categories": [
            "Core",
            "Input"
        ],
        "folderPath": "Core/Input/Create",
        "dynFile": [
            "IntegerSlider"
        ],
        "imageFile": [
            "IntegerSlider"
        ],
        "inDepth": "An Integer Slider works in the same way as a Number Slider but only outputs integers. The Integer Slider in the example definition allows us to control the list length, ensuring that we always have whole-number of list outputs. "
    },
    {
        "Name": "ByCoordinates (x, y)",
        "categories": [
            "Geometry",
            "Point"
        ],
        "folderPath": "Geometry/Point/Create",
        "dynFile": [
            "ByCoordinates",
            "ByCoordinates_crossReference"
        ],
        "imageFile": [
            "ByCoordinates",
            "ByCoordinates_crossReference"
        ],
        "inDepth": "The Point By Coordinates (XY) calls for two number inputs and generates a point on the Dynamo base plane.  In the first example,  we are using two sliders to dynamically control the point’s X and Y location on the Z-plane. In the second, we are using two Number Sliders and a Code Block Range to determine the maximum extents of the grid and the spacing between points. By changing the Points By Coordinates lacing to Cross-Reference, we can create multi-dimensional set of points along the X and Y axis."
    },
    {
        "Name": "ByCylindricalCoordinates",
        "categories": [
            "Geometry",
            "Point"
        ],
        "folderPath": "Geometry/Point/Create",
        "dynFile": [
            "ByCylindricalCoordinates"
        ],
        "imageFile": [
            "ByCylindricalCoordinates"
        ],
        "inDepth": "The Point By Cylindrical Coordinates node creates a point located within a cylindrical space. Here, we set the lacing to Cross-Reference and use a range of angles and elevations to generate a grid of points along a cylinder with a dynamic radius."
    },
    {
        "Name": "BySphericalCoordinates",
        "categories": [
            "Geometry",
            "Point"
        ],
        "folderPath": "Geometry/Point/Create",
        "dynFile": [
            "BySphericalCoordinates"
        ],
        "imageFile": [
            "BySphericalCoordinates"
        ],
        "inDepth": "The Point By Spherical Coordinates node creates a point located within a spherical space. Here, we set the lacing to Cross-Reference and use a range of phi and theta angles to generate a grid of points along a cylinder with a dynamic radius. The location of the sphere is set to a Coordinate System with the origin (1, 5, 1)."
    },
    {
        "Name": "ByCartesianCoordinates",
        "categories": [
            "Geometry",
            "Point"
        ],
        "folderPath": "Geometry/Point/Create",
        "dynFile": [
            "ByCartesianCoordinates"
        ],
        "imageFile": [
            "ByCartesianCoordinates"
        ],
        "inDepth": "Point By Cartesian Coordinates gives us the ability to set the X, Y and Z values of a point’s location. In this example, we are setting multiple Code Block Ranges controlled by sliders to drive the three-dimensional array of points."
    },
    {
        "Name": "ByCenterPointRadiusNormal",
        "categories": [
            "Geometry",
            "Circle"
        ],
        "folderPath": "Geometry/Circle/Create",
        "dynFile": [
            "ByCenterPointRadiusNormal"
        ],
        "imageFile": [
            "ByCenterPointRadiusNormal"
        ],
        "inDepth": "Circle By Center Point Radius Normal creates a circle at a point with a controllable radius and normal. In this example, we create a vector from the Origin Point to the Point By Coordinates to control the direction of the circle."
    },
    {
        "Name": "ByPlaneRadius",
        "categories": [
            "Geometry",
            "Circle"
        ],
        "folderPath": "Geometry/Circle/Create",
        "dynFile": [
            "ByPlaneRadius"
        ],
        "imageFile": [
            "ByPlaneRadius"
        ],
        "inDepth": "Circle By Plane Radius is a condensed node to create any type of circle. In this example, we use the YZ plane to determine the circle direction, and a Number slider to dynamically control the circle’s radius."
    },
    {
        "Name": "ByCenterPointRadius",
        "categories": [
            "Geometry",
            "Circle"
        ],
        "folderPath": "Geometry/Circle/Create",
        "dynFile": [
            "ByCenterPointRadius"
        ],
        "imageFile": [
            "ByCenterPointRadius"
        ],
        "inDepth": "Circle By Center Point Radius is a simplified node to create a circle with a the Z-Plane normal. This definition uses a code block to create a point in three-dimensional space, and locates the circle around the point. The radius is controlled dynamically with a Number Slider."
    },
    {
        "Name": "ByThreePoints",
        "categories": [
            "Geometry",
            "Circle"
        ],
        "folderPath": "Geometry/Circle/Create",
        "dynFile": [
            "ByThreePoints"
        ],
        "imageFile": [
            "ByThreePoints"
        ],
        "inDepth": "Circle By Three Points receives point inputs and creates a circle. This example shows how thee randomly generated points on the Z-plane will always result in a circle."
    },
    {
        "Name": "ByBestFitThroughPoints",
        "categories": [
            "Geometry",
            "Circle"
        ],
        "folderPath": "Geometry/Circle/Create",
        "dynFile": [
            "ByBestFitThroughPoints"
        ],
        "imageFile": [
            "ByBestFitThroughPoints"
        ],
        "inDepth": "Circle By Best Fit Through Points receives point inputs and creates a best fit circle through them. In this example, we can dynamically increase the number of randomly generated points with a Number Slider, altering the shape of the best-fit circle. "
    },
    {
        "Name": "ByPoints",
        "categories": [
            "Geometry",
            "Polygon"
        ],
        "folderPath": "Geometry/Polygon/Create",
        "dynFile": [
            "ByPoints"
        ],
        "imageFile": [
            "ByPoints"
        ],
        "inDepth": "Polygon By Points creates a polygon from a list of input points. The points will be connected in the order of the list they originate from. In this example, we create a list of random points driven by a Number slider. The points are then connected with lines in the Polygon By Points Component."
    },
    {
        "Name": "RegularPolygon",
        "categories": [
            "Geometry",
            "Polygon"
        ],
        "folderPath": "Geometry/Polygon/Create",
        "dynFile": [
            "RegularPolygon"
        ],
        "imageFile": [
            "RegularPolygon"
        ],
        "inDepth": "Polygon Regular Polygon is a simple component that will inscribe a regular polygon of any number of sides into a circle. In this example, we create the reference circle from a random Best Fit Through Points and draw a six-sided polygon inside the circle."
    },
    {
        "Name": "ByWidthLength (width, length)",
        "categories": [
            "Geometry",
            "Rectangle"
        ],
        "folderPath": "Geometry/Rectangle/Create",
        "dynFile": [
            "ByWidthLength"
        ],
        "imageFile": [
            "ByWidthLength"
        ],
        "inDepth": "The Rectangle By Width Length node creates a rectangle on the Z-base plane with a specified length and width dimension. The center of the rectangle will be located at the grid origin. In this example, we use two Number Sliders to drive the shape of the rectangle. "
    },
    {
        "Name": "ByCornerPoints (p1, p2, p3, p4)",
        "categories": [
            "Geometry",
            "Rectangle"
        ],
        "folderPath": "Geometry/Rectangle/Create",
        "dynFile": [
            "ByCornerPoints"
        ],
        "imageFile": [
            "ByCornerPoints"
        ],
        "inDepth": "The Rectangle By Corner Points node takes four input points and creates a rectangle from them. The input points must reflect a rectangle form. In this example, two Number Sliders are used to create the Points By Coordinates at the rectangle’s vertices. "
    },
    {
        "Name": "ByWidthLength (cs, width, length)",
        "categories": [
            "Geometry",
            "Rectangle"
        ],
        "folderPath": "Geometry/Rectangle/Create",
        "dynFile": [
            "ByWidthLength_cwl"
        ],
        "imageFile": [
            "ByWidthLength_cwl"
        ],
        "inDepth": "Create a Rectangle centered at the input origin in the CoordinateSystem XY Plane, with specified width (X Axis length), and length (Y Axis length)."
    },
    {
        "Name": "ByThickeningCurve",
        "categories": [
            "Geometry",
            "PolyCurve"
        ],
        "folderPath": "Geometry/Polycurve/Create",
        "dynFile": [
            "ByThickeningCurve"
        ],
        "imageFile": [
            "ByThickeningCurve"
        ],
        "inDepth": "Polycurve By Thickening Curve is a node that constructs a closed, offset polygon from a single curve. In this node, we can specify the curve being thickened, the overall thickness, and the normal direction of the offset. This example shows how a randomly generated Nurbs Curve is offset perpendicular to its start and end point vector. "
    },
    {
        "Name": "ByPoints",
        "categories": [
            "Geometry",
            "PolyCurve"
        ],
        "folderPath": "Geometry/Polycurve/Create",
        "dynFile": [
            "ByPoints"
        ],
        "imageFile": [
            "ByPoints"
        ],
        "inDepth": "Polycurve By Points creates joined curves from a set of vertices. This node also allows us to toggle between a closed and an open shape. In this example, points are created along a circle and are redrawn with a PolyCurve By Points component, creating a closed polygon shape."
    },
    {
        "Name": "ByJoinedCurves",
        "categories": [
            "Geometry",
            "PolyCurve"
        ],
        "folderPath": "Geometry/Polycurve/Create",
        "dynFile": [
            "ByJoinedCurves"
        ],
        "imageFile": [
            "ByJoinedCurves"
        ],
        "inDepth": "Polycurve By Joined Curves creates joined curves from a set of curves with matching vertices. In this example, a RegularPolygon is exploded into a curve list and is then rejoined into a Polycurve."
    },
    {
        "Name": "ByControlPoints (points)",
        "categories": [
            "Geometry",
            "NurbsCurve"
        ],
        "folderPath": "Geometry/NurbsCurve/Create",
        "dynFile": [
            "ByControlPoints1"
        ],
        "imageFile": [
            "ByControlPoints1"
        ],
        "inDepth": "Nurbs Curve By Control Points inputs a list of points to use as control points and outputs a Nurbs Curve. This example uses a Code Block to generate two lists corresponding to X and Y locations of a series of points. The points are used to draw the Nurbs Curve."
    },
    {
        "Name": "ByPointsTangents",
        "categories": [
            "Geometry",
            "NurbsCurve"
        ],
        "folderPath": "Geometry/NurbsCurve/Create",
        "dynFile": [
            "ByPointsTangents"
        ],
        "imageFile": [
            "ByPointsTangents"
        ],
        "inDepth": "Nurbs Curve By Points Tangents inputs a list of control points and the start and end tangent that the Nurbs Curve will maintain. This example uses a reference circle for the control points of the curve, and a single vector to control both the start and end tangents. "
    },
    {
        "Name": "ByPoints (points, degree)",
        "categories": [
            "Geometry",
            "NurbsCurve"
        ],
        "folderPath": "Geometry/NurbsCurve/Create",
        "dynFile": [
            "ByPoints_pd"
        ],
        "imageFile": [
            "ByPoints_pd"
        ],
        "inDepth": "Nurbs Curve By Points inputs a list of points to draw a Nurbs Curve through, and also allows us to change the degree of the curve. This example generates six random points on the World XY plane and connects them in order in the X and Y directions. "
    },
    {
        "Name": "ByPoints (points, closeCurve)",
        "folderPath": "Geometry/NurbsCurve/Create",
        "dynFile": [
            "ByPoints_pc"
        ],
        "imageFile": [
            "ByPoints_pc"
        ],
        "inDepth": "Nurbs Curve By Points inputs a list of points to draw a Nurbs Curve through and also allows us to close the curve. This example generates four random points on the World XY plane and connects them in order in the X and Y directions, closing the curve back to the first point in the list."
    },
    {
        "Name": "ByPoints (points)",
        "categories": [
            "Geometry",
            "NurbsCurve"
        ],
        "folderPath": "Geometry/NurbsCurve/Create",
        "dynFile": [
            "ByPoints_p"
        ],
        "imageFile": [
            "ByPoints_p"
        ],
        "inDepth": "Nurbs Curve By Points inputs a list of points to draw a Nurbs Curve through. This example generates six random points on the World XY plane and connects them in order in the X and Y directions. "
    },
    {
        "Name": "ByControlPoints (points, degree)",
        "categories": [
            "Geometry",
            "NurbsCurve"
        ],
        "folderPath": "Geometry/NurbsCurve/Create",
        "dynFile": [
            "ByControlPoints_p"
        ],
        "imageFile": [
            "ByControlPoints_p"
        ],
        "inDepth": "Nurbs Curve By Control Points inputs a list of control points to draw the Nurbs Curve and also allows us to control the degree of the curve. This example generates four random points on the World XY plane and connects them in order in the X and Y directions."
    },
    {
        "Name": "ByControlPoints (points, degree, closeCurve)",
        "categories": [
            "Geometry",
            "NurbsCurve"
        ],
        "folderPath": "Geometry/NurbsCurve/Create",
        "dynFile": [
            "ByControlPoints_pdc"
        ],
        "imageFile": [
            "ByControlPoints_pdc"
        ],
        "inDepth": "Nurbs Curve By Control Points inputs a list of control points to draw the Nurbs Curve and also allows us to control the degree of the curve. We also have the option to close the curve back to the first point in the list. This example generates four random points on the World XY plane and connects them in order in the X and Y directions."
    },
    {
        "Name": "ByControlPoints",
        "categories": [
            "Geometry",
            "NurbsSurface"
        ],
        "folderPath": "Geometry/NurbsSurface/Create",
        "dynFile": [
            "ByControlPoints"
        ],
        "imageFile": [
            "ByControlPoints"
        ],
        "inDepth": "Nurbs Surface By Control Points takes in a two dimensional array of control vertices and outputs a Nurbs Surface. This node also gives us the ability to calibrate the degree in the U and V directions. In this example, a 10 by 10 grid of points is created with a Code Block Range. The grid is then scaled in the Z-direction at random, modulating the output surface from the By Control Points node. "
    },
    {
        "Name": "ByPoints",
        "categories": [
            "Geometry",
            "NurbsSurface"
        ],
        "folderPath": "Geometry/NurbsSurface/Create",
        "dynFile": [
            "ByPoints"
        ],
        "imageFile": [
            "ByPoints"
        ],
        "inDepth": "Nurbs Surface By Points takes in a two dimensional array of control vertices and outputs a Nurbs Surface. This node also gives us the ability to calibrate the degree in the U and V directions. In this example, a 50 by 50 grid of points is created with a Code Block Range. The grid is then scaled in the Z-direction at random, modulating the output surface from the By Control Points node. "
    },
    {
        "Name": "ByBestFitThroughPoints",
        "categories": [
            "Geometry",
            "Arc"
        ],
        "folderPath": "Geometry/Arc/Create",
        "dynFile": [
            "ByBestFitThroughPoints"
        ],
        "imageFile": [
            "ByBestFitThroughPoints"
        ],
        "inDepth": "Arc ByBestFitThroughPoints draws an arc that best represents three or more points. This example creates an arc from a list of random points ranging from 0 to 4 in the X and Y directions. tEST",
        "index": 29
    },
    {
        "Name": "ByCenterPointRadiusAngle",
        "categories": [
            "Geometry",
            "Arc"
        ],
        "folderPath": "Geometry/Arc/Create",
        "dynFile": [
            "ByCenterPointRadiusAngle"
        ],
        "imageFile": [
            "ByCenterPointRadiusAngle"
        ],
        "inDepth": "Arc ByCenterPointRadiusAngle draws an arc relative to its center and normal direction. By entering the start and end angle, you are essentially drawing a portion of a circle. In this example, a random point is generated on the XY plane and an arc is constructed around it.  "
    },
    {
        "Name": "ByCenterPointStartPointEndPoint",
        "categories": [
            "Geometry",
            "Arc"
        ],
        "folderPath": "Geometry/Arc/Create",
        "dynFile": [
            "ByCenterPointStartPointEndPoint"
        ],
        "imageFile": [
            "ByCenterPointStartPointEndPoint"
        ],
        "inDepth": "Arc ByCenterPointStartPointEndPoint draws a best-fit arc around a specified Center. The arc will always begin at the Start Point and end at the closest point possible to the given End Point. This example demonstrates this property by randomly feeding the node three random points for the center, start and end point."
    },
    {
        "Name": "ByCenterPointStartPointSweepAngle",
        "categories": [
            "Geometry",
            "Arc"
        ],
        "folderPath": "Geometry/Arc/Create",
        "dynFile": [
            "ByCenterPointStartPointSweepAngle"
        ],
        "imageFile": [
            "ByCenterPointStartPointSweepAngle"
        ],
        "inDepth": "The Arc ByCenterPointStartPointSweepAngle creates an arc around a Center Point with a given Sweep Angle. The Start Point tells Dynamo where to begin drawing the arc. This example draws an arc around a randomly generated point."
    },
    {
        "Name": "ByFillet",
        "categories": [
            "Geometry",
            "Arc"
        ],
        "folderPath": "Geometry/Arc/Create",
        "dynFile": [
            "ByFillet"
        ],
        "imageFile": [
            "ByFillet"
        ],
        "inDepth": "Arc ByFillet draws a portion of a tangential circle along two input curves. In this example, two intersecting lines are drawn and then filleted at a controlled radius."
    },
    {
        "Name": "ByFilletTangentToCurve",
        "categories": [
            "Geometry",
            "Arc"
        ],
        "folderPath": "Geometry/Arc/Create",
        "dynFile": [
            "ByFilletTangentToCurve"
        ],
        "imageFile": [
            "ByFilletTangentToCurve"
        ],
        "inDepth": "Arc ByFilletTangentToCurve draws the best fit arc that is tangent to three input curves. In this example, we are using two input lines as reference curves and a circle for the arc to be tangent to."
    },
    {
        "Name": "ByStartPointEndPointStartTangent",
        "categories": [
            "Geometry",
            "Arc"
        ],
        "folderPath": "Geometry/Arc/Create",
        "dynFile": [
            "ByStartPointEndPointStartTangent"
        ],
        "imageFile": [
            "ByStartPointEndPointStartTangent"
        ],
        "inDepth": "Arc ByStartPointEndPointStartTangent draws an arc from two specified points and any given start vector. This example draws an arc from two random points that is always tangent to the X-Axis."
    },
    {
        "Name": "ByThreePoints",
        "categories": [
            "Geometry",
            "Arc"
        ],
        "folderPath": "Geometry/Arc/Create",
        "dynFile": [
            "ByThreePoints"
        ],
        "imageFile": [
            "ByThreePoints"
        ],
        "inDepth": "Arc ByThreePoints draws an arc from three points, given the Start Point, End Point and a point in-between along the arc. This example draws an arc from three randomly created points."
    },
    {
        "Name": "ByStartEndAndTangencies",
        "categories": [
            "Geometry",
            "Arc"
        ],
        "folderPath": "Geometry/Arc/Action",
        "dynFile": [
            "ByStartEndAndTangencies"
        ],
        "imageFile": [
            "ByStartEndAndTangencies"
        ],
        "inDepth": "The Arc ByStartEndAndTangencies Action creates a compound arc using two Input Points and their corresponding Vectors. In this example, two points are connected by a compound arc that is always tangent to the Y-Axis at its Start and End Points."
    },
    {
        "Name": "CenterPoint",
        "categories": [
            "Geometry",
            "Arc"
        ],
        "folderPath": "Geometry/Arc/Query",
        "dynFile": [
            "CenterPoint"
        ],
        "imageFile": [
            "CenterPoint"
        ],
        "inDepth": "Arc CenterPoint returns a Point at the Center of an Arc – the same point as the corresponding circle center. This example uses a randomly generated ArcByThreePoints to create the center point."
    },
    {
        "Name": "Radius",
        "categories": [
            "Geometry",
            "Arc"
        ],
        "folderPath": "Geometry/Arc/Query",
        "dynFile": [
            "Radius"
        ],
        "imageFile": [
            "Radius"
        ],
        "inDepth": "Arc Radius returns the Radius value of Arc geometry. In this example, we can visualize the change in Radius as the input points change in the Y-direction."
    },
    {
        "Name": "StartAngle",
        "categories": [
            "Geometry",
            "Arc"
        ],
        "folderPath": "Geometry/Arc/Query",
        "dynFile": [
            "StartAngle"
        ],
        "imageFile": [
            "StartAngle"
        ],
        "inDepth": "Arc StartAngle returns the Angle of the Arc relative to its corresponding Circle. Since this example uses a Start Point to generate the Arc, our Start Angle should always be equal to zero."
    },
    {
        "Name": "SweepAngle",
        "categories": [
            "Geometry",
            "Arc"
        ],
        "folderPath": "Geometry/Arc/Query",
        "dynFile": [
            "SweepAngle"
        ],
        "imageFile": [
            "SweepAngle"
        ],
        "inDepth": "Arc SweepAngle returns the total angle of the reference circle that the Arc traverses. This example shows how this property is accessed from an Arc ByThreePoints."
    },
    {
        "Name": "ByGeometry (geom) (geom)",
        "categories": [
            "Geometry",
            "BoundingBox"
        ],
        "folderPath": "Geometry/BoundingBox/Create",
        "dynFile": [
            "ByGeometry_g"
        ],
        "imageFile": [
            "ByGeometry_g"
        ],
        "inDepth": "Bounding Box ByGeometry solves for the Bounding Box of an input Geometry. This example shows a Bounding Box drawn around an input Sphere. In order to visualize the Box, we are converting the box to a Cuboid and extracting its edge curves."
    },
    {
        "Name": "ByGeometry (geom) (geom)",
        "categories": [
            "Geometry",
            "BoundingBox"
        ],
        "folderPath": "Geometry/BoundingBox/Create",
        "dynFile": [
            "ByGeometry_gg"
        ],
        "imageFile": [
            "ByGeometry_gg"
        ],
        "inDepth": "Bounding Box ByGeometry solves a Bounding Box of multiple input Geometry. This example shows a Bounding Box drawn around multiple Cones. In order to visualize the Box, we are converting the box to a Polysurface and extracting its edge curves."
    },
    {
        "Name": "ByCorners",
        "categories": [
            "Geometry",
            "BoundingBox"
        ],
        "folderPath": "Geometry/BoundingBox/Create",
        "dynFile": [
            "ByCorners"
        ],
        "imageFile": [
            "ByCorners"
        ],
        "inDepth": "Bounding Box ByCorners creates a Bounding Box from two input points. In this example we are using the diagonal vector to Translate the Start Point of the box to create its End Point. In order to visualize the Box, we are converting the box to a Polysurface and extracting its edge curves."
    },
    {
        "Name": "ToPolysurface",
        "categories": [
            "Geometry",
            "BoundingBox"
        ],
        "folderPath": "Geometry/BoundingBox/Action",
        "dynFile": [
            "ToPolysurface"
        ],
        "imageFile": [
            "ToPolysurface"
        ],
        "inDepth": "Bounding Box ToPolysurface creates a Polysurface from a Bounding Box. In this example we are using the Bounding Box of multiple Cones to create a Polysurface. In order to visualize the relationship of the input Cones to the Polysurface we are extracting the Polysurface edge curves."
    },
    {
        "Name": "Intersects",
        "categories": [
            "Geometry",
            "BoundingBox"
        ],
        "folderPath": "Geometry/BoundingBox/Action",
        "dynFile": [
            "Intersects"
        ],
        "imageFile": [
            "Intersects"
        ],
        "inDepth": "Bounding Box Intersects tests two bounding boxes for overlap. If the boxes intersect, the node will return True, otherwise it will return False. This example tests for an intersection between the Bounding Boxes of two input Cones."
    },
    {
        "Name": "Intersection",
        "categories": [
            "Geometry",
            "BoundingBox"
        ],
        "folderPath": "Geometry/BoundingBox/Action",
        "dynFile": [
            "Intersection"
        ],
        "imageFile": [
            "Intersection"
        ],
        "inDepth": "Bounding Box Intersection solves for the Intersection for two Bounding Boxes and returns the overlapping Bounding Box. This example uses two cones to demonstrate the use of this node. In order to visualize the Box we are converting it to a Cuboid."
    },
    {
        "Name": "Contains",
        "categories": [
            "Geometry",
            "BoundingBox"
        ],
        "folderPath": "Geometry/BoundingBox/Action",
        "dynFile": [
            "Contains"
        ],
        "imageFile": [
            "Contains"
        ],
        "inDepth": "Bounding Box Contains tests if a specified Point is inside of a Bounding Box. Because the Point in this example is at (5,5,5), and our Origin Sphere’s Radius is larger than 5, the Contains node will return True."
    },
    {
        "Name": "ToCuboid",
        "categories": [
            "Geometry",
            "BoundingBox"
        ],
        "folderPath": "Geometry/BoundingBox/Action",
        "dynFile": [
            "ToCuboid"
        ],
        "imageFile": [
            "ToCuboid"
        ],
        "inDepth": "Bounding Box ToCuboid creates a Cuboid geometry from a Bounding Box. In order to visualize the relationship of the input Sphere to the Cuboid in the example, we are extracting its edge curves."
    },
    {
        "Name": "MaxPoint",
        "categories": [
            "Geometry",
            "BoundingBox"
        ],
        "folderPath": "Geometry/BoundingBox/Query",
        "dynFile": [
            "MaxPoint"
        ],
        "imageFile": [
            "MaxPoint"
        ],
        "inDepth": "Bounding Box MaxPoint returns the point that has the largest X, Y and Z values. This example shows a Bounding Box MaxPoint of a Sphere."
    },
    {
        "Name": "MinPoint",
        "categories": [
            "Geometry",
            "BoundingBox"
        ],
        "folderPath": "Geometry/BoundingBox/Query",
        "dynFile": [
            "MinPoint"
        ],
        "imageFile": [
            "MinPoint"
        ],
        "inDepth": "Bounding Box MinPoint returns the point that has the smallest X, Y and Z values. This example shows a Bounding Box MinPoint of a Sphere."
    },
    {
        "Name": "ByCoordinateSystemHeightRadii",
        "categories": [
            "Geometry",
            "Cone"
        ],
        "folderPath": "Geometry/Cone/Create",
        "dynFile": [
            "ByCoordinateSystemHeightRadii"
        ],
        "imageFile": [
            "ByCoordinateSystemHeightRadii"
        ],
        "inDepth": "Cone ByCoordinateSystemHeightRadii creates a truncated Cone geometry from two Radii, the starting Origin, and a Height value. This example shows a dynamic Cone around the World Origin, constructed with three Number Sliders."
    },
    {
        "Name": "ByCoordinateSystemHeightRadius",
        "categories": [
            "Geometry",
            "Cone"
        ],
        "folderPath": "Geometry/Cone/Create",
        "dynFile": [
            "ByCoordinateSystemHeightRadius"
        ],
        "imageFile": [
            "ByCoordinateSystemHeightRadius"
        ],
        "inDepth": "Cone ByCoordinateSystemHeightRadius creates a Cone geometry from a Radius, the Cone Origin, and a Height value. This example shows a dynamic Cone around the World Origin, constructed with two Number Sliders."
    },
    {
        "Name": "ByPointsRadii",
        "categories": [
            "Geometry",
            "Cone"
        ],
        "folderPath": "Geometry/Cone/Create",
        "dynFile": [
            "ByPointsRadii"
        ],
        "imageFile": [
            "ByPointsRadii"
        ],
        "inDepth": "Cone ByPointsRadii creates a truncated Cone geometry from a Start Point, End Point, and two Radius values. This example shows a dynamic Cone around the World Origin, constructed with three Number Sliders controlling its Height and Radius sizes."
    },
    {
        "Name": "ByPointsRadius",
        "categories": [
            "Geometry",
            "Cone"
        ],
        "folderPath": "Geometry/Cone/Create",
        "dynFile": [
            "ByPointsRadius"
        ],
        "imageFile": [
            "ByPointsRadius"
        ],
        "inDepth": "Cone ByPointsRadius creates a Cone geometry from a Start Point, End Point, and a Radius value. This example shows a dynamic Cone around the World Origin, constructed with two Number Sliders controlling its Height and Radius size."
    },
    {
        "Name": "ClosestPointTo",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "ClosestPointTo"
        ],
        "imageFile": [
            "ClosestPointTo"
        ],
        "inDepth": "Geometry ClosestPointTo finds the closest point from one geometry to another, adding a 3D Point to the document. This example finds the closest point on one Sphere to another."
    },
    {
        "Name": "DistanceTo",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "DistanceTo"
        ],
        "imageFile": [
            "DistanceTo"
        ],
        "inDepth": "Geometry DistanceTo returns the distance between two geometries. This example finds the distance between two Spheres."
    },
    {
        "Name": "DoesIntersect",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "DoesIntersect"
        ],
        "imageFile": [
            "DoesIntersect"
        ],
        "inDepth": "Geometry DoesIntersect tests two geometries for an intersection. If the objects intersect, the Node will return True. This example tests for an intersection of two Sphere geometries."
    },
    {
        "Name": "Explode",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Explode"
        ],
        "imageFile": [
            "Explode"
        ],
        "inDepth": "The Geometry Explode Node breaks a geometry down into smaller components. For example, a Polysurface can be Exploded into several Surfaces and a Polycurve into curves. In this example, we are extracting a single Surface from a complex Intersection of three Spheres."
    },
    {
        "Name": "ExportToSAT (geometry, filePath)",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "ExportToSAT_gf"
        ],
        "imageFile": [
            "ExportToSAT_gf"
        ],
        "inDepth": "Geometry ExportToSAT exports Geometry from Dynamo to a SAT file type. In this example, we are exporting a Polysurface from the Intersection of three Spheres."
    },
    {
        "Name": "Intersect",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Intersect"
        ],
        "imageFile": [
            "Intersect"
        ],
        "inDepth": "Geometry Intersect finds the Intersection Geometry that two Geometry objects share. In this example, the Intersection of two Spheres returns a Polysurface, otherwise known as a Solid Intersection."
    },
    {
        "Name": "IntersectAll",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "IntersectAll"
        ],
        "imageFile": [
            "IntersectAll"
        ],
        "inDepth": "Geometry IntersectAll finds the Intersection Geometry that any number of Geometry objects share. In this example, the Intersection of three Spheres returns a Polysurface, otherwise known as a Solid Intersection."
    },
    {
        "Name": "Mirror",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Mirror"
        ],
        "imageFile": [
            "Mirror"
        ],
        "inDepth": "Geometry Mirror reflects a Geometry across a defined Plane. In this example, we are Mirroring a Cone across the Y-Axis."
    },
    {
        "Name": "Rotate (geometry, origin, axis, degrees)",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Rotate_goad"
        ],
        "imageFile": [
            "Rotate_goad"
        ],
        "inDepth": "This Geometry Rotate Node Rotates an input Geometry around a Base Plane by a defined Degree. In the example file, a Cone is Rotated around the XY-Plane with a Number Slider."
    },
    {
        "Name": "Rotate (geometry, basePlane, degrees)",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Rotate_gbd"
        ],
        "imageFile": [
            "Rotate_gbd"
        ],
        "inDepth": "This Geometry Rotate Node Rotates an input Geometry around an Origin Point and Axis Vector by a certain Degree amount. In the example file, a Cone is Rotated about the Y-Axis Vector by its End Point."
    },
    {
        "Name": "Scale (geometry, basePoint, from, to)",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Scale_gbft"
        ],
        "imageFile": [
            "Scale_gbft"
        ],
        "inDepth": "This Geometry Scale Node Scales an input Geometry from three reference Points. In this example, we are scaling a Cone relative to its End Point from its Start Point to its Centroid. The Cone Circle and side Edge are drawn as a visual reference of the Scale."
    },
    {
        "Name": "Scale (geometry, amount)",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Scale_ga"
        ],
        "imageFile": [
            "Scale_ga"
        ],
        "inDepth": "This Geometry Scale Node Scales an input Geometry from the object Centroid by an input factor. In the example file, a Cone is scaled down with a Number Slider. The original Cone Edges are drawn for a visual reference."
    },
    {
        "Name": "Scale (geometry, xamount, yamount, zamount)",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Scale_gxyz"
        ],
        "imageFile": [
            "Scale_gxyz"
        ],
        "inDepth": "This Geometry Scale Node Scales an input Geometry from the object Centroid by an input factor. In the example, a Cone’s Scale can be finely tuned with three Number Sliders. The original Cone Edges are drawn as a visual reference."
    },
    {
        "Name": "Scale (geometry, plane, xamount, yamount, zamount)",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Scale_gpxyz"
        ],
        "imageFile": [
            "Scale_gpxyz"
        ],
        "inDepth": "This Geometry Scale Node Scales an input Geometry about a Plane by specified X, Y and Z factors. This example shows a Cone before and after it is scaled in relationship to the YZ-Plane."
    },
    {
        "Name": "Scale1D",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Scale1D"
        ],
        "imageFile": [
            "Scale1D"
        ],
        "inDepth": "Geometry Scale1D Scales a Geometry in one direction from a Base Point and two reference Points. In the example file, a Cone is scaled from its End Point to its Centroid in relation to the Cone Start Point. The original Cone Edges are drawn as a visual reference."
    },
    {
        "Name": "Scale2D",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Scale2D"
        ],
        "imageFile": [
            "Scale2D"
        ],
        "inDepth": "Geometry Scale2D Scales a Geometry in two directions from a Base Plane and two reference Points. In the example file, a Cone is scaled from its End Point to its Centroid in relation to the YZ-Plane."
    },
    {
        "Name": "Split",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Split"
        ],
        "imageFile": [
            "Split"
        ],
        "inDepth": "The Geometry Split Node functions similarly to the Geometry Trim Node. It inputs a Tool – any type of Geometry that you will be trimming another Geometry with – and a Geometry, and returns all of the fragments of Geometry. In this example, a Cone is Split with a similar Cone. Although all fragments are returned by the Geometry Split Node, one is previewed in the example file."
    },
    {
        "Name": "Transform (geometry, fromCoordinateSystem, contextCoordinateSystem)",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Transform_gfc"
        ],
        "imageFile": [
            "Transform_gfc"
        ],
        "inDepth": "This Geometry Transform Node moves and orients a geometry from one Coordinate System plane to another specified Coordinate System. In this example a Cone is Transformed from the ground plane to the YZ-Plane."
    },
    {
        "Name": "Transform (geometry, cs)",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Transform_gc"
        ],
        "imageFile": [
            "Transform_gc"
        ],
        "inDepth": "This Geometry Transform Node moves and orients a geometry from the XY-Plane to any specified Plane. In this example a Cone is Transformed from the XY-Plane to the YZ-Plane."
    },
    {
        "Name": "Translate (geometry, direction)",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Translate_gd"
        ],
        "imageFile": [
            "Translate_gd"
        ],
        "inDepth": "This Geometry Translate Node moves a geometry by any given Vector. In the example file, we are Translating a Cone by the Vector created between the Start and End Points of the Cone."
    },
    {
        "Name": "Translate (geometry, xTranslation, yTranslation, zTranslation)",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Translate_gxyz"
        ],
        "imageFile": [
            "Translate_gxyz"
        ],
        "inDepth": "This Geometry Translate Node moves a geometry by any given Vector direction and a Distance. In the example file, we are Translating a Cone in the X-Axis direction by a distance inherited by a Number Slider."
    },
    {
        "Name": "Translate (geometry, direction, distance)",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Translate_gdd"
        ],
        "imageFile": [
            "Translate_gdd"
        ],
        "inDepth": "This Geometry Translate Node moves a geometry by a Vector defined in the Node by inputting all three Translation Values for X, Y and Z. In the example file, a Cone is Translated by three Number Slider values."
    },
    {
        "Name": "Trim",
        "categories": [
            "Geometry",
            "Geometry"
        ],
        "folderPath": "Geometry/Geometry/Action",
        "dynFile": [
            "Trim"
        ],
        "imageFile": [
            "Trim"
        ],
        "inDepth": "Geometry Trim functions similarly to the Geometry Split Node in that it inputs a Tool – any type of Geometry that you will be trimming another Geometry with – and a Geometry, but returns only a single fragment of the Geometry. The Geometry that is Picked is selected by a reference Point closest to the fragment. In this example, one Cone is Trimmed by another, with its lower portion Picked."
    }
]